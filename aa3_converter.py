# aa3_converter.py (Corrected with your parameters)

import numpy as np
import sys
from typing import Tuple

def convert_xy_to_lat_lon(posx: float, posy: float) -> Tuple[float, float]:
    """
    Converts a single (posx, posy) pair from the 'aa3.trn' map to 
    (latitude, longitude) using a pre-calibrated model.
    
    The parameters are hardcoded from a 5-point calibration.
    """
    # These are the correct parameters generated by your script.
    a_params = np.array([ 4.30187214e+01,  1.30435252e-07,  1.00459661e-05,  3.33382322e-14, -1.91681780e-12])
    b_params = np.array([ 1.58708234e+01, -1.22814009e-05,  1.18817719e-06, -2.05553486e-12, -7.30382280e-14])

    # Create the feature vector [1, x, y, x*y, y^2]
    phi = np.array([1.0, posx, posy, posx * posy, posy * posy])
    
    # Predict latitude and longitude using the dot product
    lat = float(phi @ a_params)
    lon = float(phi @ b_params)
    
    return lat, lon

# --- Command-Line Execution Logic for Testing ---
if __name__ == "__main__":
    if len(sys.argv) == 3:
        try:
            px = float(sys.argv[1])
            py = float(sys.argv[2])
            
            print("--- Testing with command-line arguments ---")
            latitude, longitude = convert_xy_to_lat_lon(px, py)
            
            print(f"Input XY:      ({px}, {py})")
            print(f"Predicted Lat: {latitude:.6f}")
            print(f"Predicted Lon: {longitude:.6f}")

        except ValueError:
            print("Error: Please provide two valid numbers for posx and posy.")
            print("Usage: python aa3_converter.py <posx> <posy>")
    else:
        print("--- Running default internal test (interior_1) ---")
        print("Usage: To test custom values, run -> python aa3_converter.py <posx> <posy>\n")
        
        px, py = 460800.0, 288000.0
        latitude, longitude = convert_xy_to_lat_lon(px, py)
        
        print(f"Input XY:      ({px}, {py})")
        print(f"Predicted Lat: {latitude:.6f}  (Ref: 45.817500)")
        print(f"Predicted Lon: {longitude:.6f}  (Ref: 10.274900)")